import { read_char_string_from_bytes_buffer, read_u32_be_from_bytes_buffer, u32 } from '@lifaon/math';

export interface IGenericVoxChunk {
  readonly id: string;
  readonly bytes: Uint8Array;
  readonly childrenBytes: Uint8Array;
}

export function decode_generic_vox_chunk(
  bytes: Uint8Array,
): [chunk: IGenericVoxChunk, remaining: Uint8Array] {
  const byteLength: u32 = read_u32_be_from_bytes_buffer(bytes, 4);
  const byteOffsetStart: u32 = 12;
  const byteOffsetEnd: u32 = byteOffsetStart + byteLength;

  const childrenByteLength: u32 = read_u32_be_from_bytes_buffer(bytes, 8);
  const childrenByteOffsetStart: u32 = byteOffsetEnd;
  const childrenByteOffsetEnd: u32 = childrenByteOffsetStart + childrenByteLength;

  return [
    {
      id: read_char_string_from_bytes_buffer(bytes, 0, 4),
      bytes: bytes.subarray(byteOffsetStart, byteOffsetEnd),
      childrenBytes: bytes.subarray(childrenByteOffsetStart, childrenByteOffsetEnd),
    },
    bytes.subarray(childrenByteOffsetEnd),
  ];
}


